{"Constants": {"Constant153": {"dim": 1, "values": 0.0},
               "Constant154": {"dim": 1, "values": 378.9961321254068},
               "Constant158": {"dim": 1, "values": 0.0},
               "Constant159": {"dim": 1, "values": 3034.740976853754},
               "Constant163": {"dim": 1, "values": 0.0},
               "Constant164": {"dim": 1, "values": 1114.470293868032},
               "Constant168": {"dim": 1, "values": 4.0},
               "Constant169": {"dim": 1, "values": 20.627002395766304},
               "Constant173": {"dim": 1, "values": -1.5607289739112873},
               "Constant174": {"dim": 1, "values": 2.746621294865885},
               "I_wf": {"dim": 1, "values": 2.4},
               "I_wr": {"dim": 1, "values": 2.4},
               "Tyf_min_thresh_neg": {"dim": 1, "values": -200},
               "Tyf_min_thresh_pos": {"dim": 1, "values": 200},
               "g": {"dim": 1, "values": 9.81},
               "i_gear": {"dim": 1, "values": 10.163},
               "lambda_forget": {"dim": 1, "values": 0.995},
               "r_f": {"dim": 1, "values": 0.364},
               "r_r": {"dim": 1, "values": 0.363},
               "reg_fact": {"dim": 1, "values": 0.03},
               "vx_min_thresh": {"dim": 1, "values": 4.0}},
 "Functions": {"FParamFun150": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                                "map_over_dim": false,
                                "n_input": 3,
                                "name": "sat_fun",
                                "out_dim": {"dim": 1, "sw": 1},
                                "params_and_consts": []},
               "FParamFun155": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                                "map_over_dim": false,
                                "n_input": 3,
                                "name": "sat_fun",
                                "out_dim": {"dim": 1, "sw": 1},
                                "params_and_consts": []},
               "FParamFun160": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                                "map_over_dim": false,
                                "n_input": 3,
                                "name": "sat_fun",
                                "out_dim": {"dim": 1, "sw": 1},
                                "params_and_consts": []},
               "FParamFun165": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                                "map_over_dim": false,
                                "n_input": 3,
                                "name": "sat_fun",
                                "out_dim": {"dim": 1, "sw": 1},
                                "params_and_consts": []},
               "FParamFun170": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                                "map_over_dim": false,
                                "n_input": 3,
                                "name": "sat_fun",
                                "out_dim": {"dim": 1, "sw": 1},
                                "params_and_consts": []},
               "FParamFun202": {"code": "def Phi_model(theta, ax,   # inputs\n              g,           # constant (gravitational acceleration)\n              c_r          # learnable parameter (rolling resist. coeff.)\n              ):\n  output = ax + g*torch.sin(theta) + c_r*g*torch.cos(theta)\n  return output\n",
                                "map_over_dim": false,
                                "n_input": 2,
                                "name": "Phi_model",
                                "out_dim": {"dim": 1, "sw": 1},
                                "params_and_consts": ["g", "c_r"]},
               "FParamFun205": {"code": "def y_model(Tyf_engine, Tyf_brake, Tyr_brake, vx, ax,  # inputs\n            I_wf, I_wr, r_f, r_r, i_gear,              # constants\n            c_v, k_d                                   # learnable parameters (linear and quadratic drag)\n            ):\n  # wheel torques\n  T_yf_traction = Tyf_engine*i_gear\n  T_yf = T_yf_traction - Tyf_brake\n  T_yr = -Tyr_brake\n\n  # analytical model formulation, based on the longitudinal vehicle dynamics\n  analytical_model = (-2*I_wf*ax/r_f + T_yf)/r_f + \\\n                     (-2*I_wr*ax/r_r + T_yr)/r_r - c_v*vx - k_d*torch.pow(vx,2)\n\n  # output of the layer\n  output = analytical_model\n  return output\n",
                                "map_over_dim": false,
                                "n_input": 5,
                                "name": "y_model",
                                "out_dim": {"dim": 1, "sw": 1},
                                "params_and_consts": ["I_wf",
                                                      "I_wr",
                                                      "r_f",
                                                      "r_r",
                                                      "i_gear",
                                                      "c_v",
                                                      "k_d"]},
               "FParamFun206": {"code": "def RLS_update(m,    # vehicle mass estimate at the previous time step\n               P,    # covariance of the estimation error at the previous time step\n               Phi,  # regressor at the current time step\n               y,    # measurement model at the current time step\n               Tyf_engine, Tyf_brake, vx,  # inputs\n               i_gear, lambda_forget,  # constants\n               Tyf_min_thresh_pos, Tyf_min_thresh_neg, vx_min_thresh, reg_fact,  # constants\n               ):\n  # compute the total torque at the front wheels\n  Tyf = Tyf_engine*i_gear - Tyf_brake\n\n  # compute the Kalman gain\n  L = P*Phi / (lambda_forget + Phi*P*Phi)\n\n  # update the covariance matrix\n  P_update = (1/lambda_forget) * (P - L*Phi*P)\n\n  # validity functions to freeze the mass estimate:\n  # validity function for the wheel torque: it goes to 0 when Tyf is in [Tyf_min_thresh_neg,Tyf_min_thresh_pos], and 1 otherwise\n  validity_fun_Tyf = 1.0 + (torch.sin(torch.atan((Tyf-Tyf_min_thresh_pos)/reg_fact))+1.0)/2.0 - \\\n                           (torch.sin(torch.atan((Tyf-Tyf_min_thresh_neg)/reg_fact))+1.0)/2.0\n  # vality function for the vehicle speed: it goes to 0 when vx is below vx_min_thresh, and 1 otherwise\n  validity_fun_vx = (torch.sin(torch.atan((vx-vx_min_thresh)/reg_fact))+1.0)/2.0\n  # overall validity function\n  validity_fun = validity_fun_Tyf * validity_fun_vx\n\n  # update the vehicle mass estimate\n  m_update = m + L*(y - Phi*m)*validity_fun\n\n  # return the updated mass estimate and the updated covariance:\n  # concatenate the two tensors along the third dimension, but do not add a new dimension\n  out_tensor = torch.cat((m_update,P_update),dim=2)\n  return out_tensor\n",
                                "map_over_dim": false,
                                "n_input": 7,
                                "name": "RLS_update",
                                "out_dim": {"dim": 2, "sw": 1},
                                "params_and_consts": ["i_gear",
                                                      "lambda_forget",
                                                      "Tyf_min_thresh_pos",
                                                      "Tyf_min_thresh_neg",
                                                      "vx_min_thresh",
                                                      "reg_fact"]}},
 "Inputs": {"Tyf_brake": {"dim": 1, "sw": [0, 1], "tw": [0, 0]},
            "Tyf_engine": {"dim": 1, "sw": [0, 1], "tw": [0, 0]},
            "Tyr_brake": {"dim": 1, "sw": [0, 1], "tw": [0, 0]},
            "ax": {"dim": 1, "sw": [0, 1], "tw": [0, 0]},
            "m_target": {"dim": 1, "sw": [0, 1], "tw": [0, 0]},
            "theta": {"dim": 1, "sw": [0, 1], "tw": [0, 0]},
            "vx": {"dim": 1, "sw": [0, 1], "tw": [0, 0]}},
 "Minimizers": {"mass_error": {"A": "SamplePart386",
                               "B": "Select381",
                               "loss": "mse"}},
 "Models": "mass_estim",
 "Outputs": {"P_out": "Select382", "m_out": "Select381"},
 "Parameters": {"c_r": {"dim": 1, "sw": 1, "values": [[0.012]]},
                "c_v": {"dim": 1, "sw": 1, "values": [[0.005]]},
                "k_d": {"dim": 1, "sw": 1, "values": [[1.001]]}},
 "Relations": {"ParamFun274": ["ParamFun",
                               ["SamplePart273", "Constant153", "Constant154"],
                               "FParamFun150"],
               "ParamFun285": ["ParamFun",
                               ["SamplePart284", "Constant158", "Constant159"],
                               "FParamFun155"],
               "ParamFun296": ["ParamFun",
                               ["SamplePart295", "Constant163", "Constant164"],
                               "FParamFun160"],
               "ParamFun307": ["ParamFun",
                               ["SamplePart306", "Constant168", "Constant169"],
                               "FParamFun165"],
               "ParamFun318": ["ParamFun",
                               ["SamplePart317", "Constant173", "Constant174"],
                               "FParamFun170"],
               "ParamFun372": ["ParamFun",
                               ["SamplePart371", "ParamFun318"],
                               "FParamFun202"],
               "ParamFun375": ["ParamFun",
                               ["ParamFun274",
                                "ParamFun285",
                                "ParamFun296",
                                "ParamFun307",
                                "ParamFun318"],
                               "FParamFun205"],
               "ParamFun380": ["ParamFun",
                               ["SamplePart377",
                                "SamplePart379",
                                "ParamFun372",
                                "ParamFun375",
                                "ParamFun274",
                                "ParamFun285",
                                "ParamFun307"],
                               "FParamFun206"],
               "SamplePart273": ["SamplePart", ["Tyf_engine"], [0, 1]],
               "SamplePart284": ["SamplePart", ["Tyf_brake"], [0, 1]],
               "SamplePart295": ["SamplePart", ["Tyr_brake"], [0, 1]],
               "SamplePart306": ["SamplePart", ["vx"], [0, 1]],
               "SamplePart317": ["SamplePart", ["ax"], [0, 1]],
               "SamplePart371": ["SamplePart", ["theta"], [0, 1]],
               "SamplePart377": ["SamplePart", ["m"], [0, 1]],
               "SamplePart379": ["SamplePart", ["P"], [0, 1]],
               "SamplePart386": ["SamplePart", ["m_target"], [0, 1]],
               "Select381": ["Select", ["ParamFun380"], 0],
               "Select382": ["Select", ["ParamFun380"], 1]},
 "SampleTime": 1,
 "States": {"P": {"closedLoop": "Select382",
                  "dim": 1,
                  "sw": [0, 1],
                  "tw": [0, 0]},
            "m": {"closedLoop": "Select381",
                  "dim": 1,
                  "sw": [0, 1],
                  "tw": [0, 0]}}}