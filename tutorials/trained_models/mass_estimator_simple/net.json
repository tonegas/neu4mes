{"Constants": {"Constant15": {"dim": 1, "values": 0.0},
               "Constant16": {"dim": 1, "values": 377.6262110790851},
               "Constant20": {"dim": 1, "values": 0.0},
               "Constant21": {"dim": 1, "values": 3025.1271849788513},
               "Constant25": {"dim": 1, "values": 0.0},
               "Constant26": {"dim": 1, "values": 1114.470293868032},
               "Constant30": {"dim": 1, "values": 4.0},
               "Constant31": {"dim": 1, "values": 20.602628835892496},
               "Constant35": {"dim": 1, "values": -1.579244931770138},
               "Constant36": {"dim": 1, "values": 2.769974460279425},
               "I_wf": {"dim": 1, "values": 2.4},
               "I_wr": {"dim": 1, "values": 2.4},
               "Tyf_min_thresh_neg": {"dim": 1, "values": -200},
               "Tyf_min_thresh_pos": {"dim": 1, "values": 200},
               "g": {"dim": 1, "values": 9.81},
               "i_gear": {"dim": 1, "values": 10.163},
               "lambda_forget": {"dim": 1, "values": 0.995},
               "r_f": {"dim": 1, "values": 0.364},
               "r_r": {"dim": 1, "values": 0.363},
               "reg_fact": {"dim": 1, "values": 0.03},
               "vx_min_thresh": {"dim": 1, "values": 4.0}},
 "Functions": {"FParamFun12": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                               "in_dim": [{"dim": 1, "sw": 1},
                                          {"dim": 1},
                                          {"dim": 1}],
                               "map_over_dim": false,
                               "n_input": 3,
                               "name": "sat_fun",
                               "out_dim": {"dim": 1, "sw": 1},
                               "params_and_consts": []},
               "FParamFun17": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                               "in_dim": [{"dim": 1, "sw": 1},
                                          {"dim": 1},
                                          {"dim": 1}],
                               "map_over_dim": false,
                               "n_input": 3,
                               "name": "sat_fun",
                               "out_dim": {"dim": 1, "sw": 1},
                               "params_and_consts": []},
               "FParamFun22": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                               "in_dim": [{"dim": 1, "sw": 1},
                                          {"dim": 1},
                                          {"dim": 1}],
                               "map_over_dim": false,
                               "n_input": 3,
                               "name": "sat_fun",
                               "out_dim": {"dim": 1, "sw": 1},
                               "params_and_consts": []},
               "FParamFun27": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                               "in_dim": [{"dim": 1, "sw": 1},
                                          {"dim": 1},
                                          {"dim": 1}],
                               "map_over_dim": false,
                               "n_input": 3,
                               "name": "sat_fun",
                               "out_dim": {"dim": 1, "sw": 1},
                               "params_and_consts": []},
               "FParamFun32": {"code": "def sat_fun(x,x_min,x_max):\n  return torch.min(torch.max(x,x_min),x_max)\n",
                               "in_dim": [{"dim": 1, "sw": 1},
                                          {"dim": 1},
                                          {"dim": 1}],
                               "map_over_dim": false,
                               "n_input": 3,
                               "name": "sat_fun",
                               "out_dim": {"dim": 1, "sw": 1},
                               "params_and_consts": []},
               "FParamFun64": {"code": "def Phi_model(theta, ax,   # inputs\n              g,           # constant (gravitational acceleration)\n              c_r          # learnable parameter (rolling resist. coeff.)\n              ):\n  output = ax + g*torch.sin(theta) + c_r*g*torch.cos(theta)\n  return output\n",
                               "in_dim": [{"dim": 1, "sw": 1},
                                          {"dim": 1, "sw": 1}],
                               "map_over_dim": false,
                               "n_input": 2,
                               "name": "Phi_model",
                               "out_dim": {"dim": 1, "sw": 1},
                               "params_and_consts": ["g", "c_r"]},
               "FParamFun67": {"code": "def y_model(Tyf_engine, Tyf_brake, Tyr_brake, vx, ax,  # inputs\n            I_wf, I_wr, r_f, r_r, i_gear,              # constants\n            c_v, k_d                                   # learnable parameters (linear and quadratic drag)\n            ):\n  # wheel torques\n  T_yf_traction = Tyf_engine*i_gear\n  T_yf = T_yf_traction - Tyf_brake\n  T_yr = -Tyr_brake\n\n  # analytical model formulation, based on the longitudinal vehicle dynamics\n  analytical_model = (-2*I_wf*ax/r_f + T_yf)/r_f + \\\n                     (-2*I_wr*ax/r_r + T_yr)/r_r - c_v*vx - k_d*torch.pow(vx,2)\n\n  # output of the layer\n  output = analytical_model\n  return output\n",
                               "in_dim": [{"dim": 1, "sw": 1},
                                          {"dim": 1, "sw": 1},
                                          {"dim": 1, "sw": 1},
                                          {"dim": 1, "sw": 1},
                                          {"dim": 1, "sw": 1}],
                               "map_over_dim": false,
                               "n_input": 5,
                               "name": "y_model",
                               "out_dim": {"dim": 1, "sw": 1},
                               "params_and_consts": ["I_wf",
                                                     "I_wr",
                                                     "r_f",
                                                     "r_r",
                                                     "i_gear",
                                                     "c_v",
                                                     "k_d"]},
               "FParamFun68": {"code": "def RLS_update(m,    # vehicle mass estimate at the previous time step\n               P,    # covariance of the estimation error at the previous time step\n               Phi,  # regressor at the current time step\n               y,    # measurement model at the current time step\n               Tyf_engine, Tyf_brake, vx,  # inputs\n               i_gear, lambda_forget,  # constants\n               Tyf_min_thresh_pos, Tyf_min_thresh_neg, vx_min_thresh, reg_fact,  # constants\n               ):\n  # compute the total torque at the front wheels\n  Tyf = Tyf_engine*i_gear - Tyf_brake\n\n  # compute the Kalman gain\n  L = P*Phi / (lambda_forget + Phi*P*Phi)\n\n  # update the covariance matrix\n  P_update = (1/lambda_forget) * (P - L*Phi*P)\n\n  # validity functions to freeze the mass estimate:\n  # validity function for the wheel torque: it goes to 0 when Tyf is in [Tyf_min_thresh_neg,Tyf_min_thresh_pos], and 1 otherwise\n  validity_fun_Tyf = 1.0 + (torch.sin(torch.atan((Tyf-Tyf_min_thresh_pos)/reg_fact))+1.0)/2.0 - \\\n                           (torch.sin(torch.atan((Tyf-Tyf_min_thresh_neg)/reg_fact))+1.0)/2.0\n  # vality function for the vehicle speed: it goes to 0 when vx is below vx_min_thresh, and 1 otherwise\n  validity_fun_vx = (torch.sin(torch.atan((vx-vx_min_thresh)/reg_fact))+1.0)/2.0\n  # overall validity function\n  validity_fun = validity_fun_Tyf * validity_fun_vx\n\n  # update the vehicle mass estimate\n  m_update = m + L*(y - Phi*m)*validity_fun\n\n  # return the updated mass estimate and the updated covariance:\n  # concatenate the two tensors along the third dimension, but do not add a new dimension\n  out_tensor = torch.cat((m_update,P_update),dim=2)\n  return out_tensor\n",
                               "in_dim": [{"dim": 1, "sw": 1},
                                          {"dim": 1, "sw": 1},
                                          {"dim": 1, "sw": 1},
                                          {"dim": 1, "sw": 1},
                                          {"dim": 1, "sw": 1},
                                          {"dim": 1, "sw": 1},
                                          {"dim": 1, "sw": 1}],
                               "map_over_dim": false,
                               "n_input": 7,
                               "name": "RLS_update",
                               "out_dim": {"dim": 2, "sw": 1},
                               "params_and_consts": ["i_gear",
                                                     "lambda_forget",
                                                     "Tyf_min_thresh_pos",
                                                     "Tyf_min_thresh_neg",
                                                     "vx_min_thresh",
                                                     "reg_fact"]}},
 "Info": {"SampleTime": 1, "ns": [0, 1], "ntot": 1},
 "Inputs": {"P": {"dim": 1,
                  "ns": [0, 1],
                  "ntot": 1,
                  "sw": [0, 1],
                  "tw": [0, 0]},
            "Tyf_brake": {"dim": 1,
                          "ns": [0, 1],
                          "ntot": 1,
                          "sw": [0, 1],
                          "tw": [0, 0]},
            "Tyf_engine": {"dim": 1,
                           "ns": [0, 1],
                           "ntot": 1,
                           "sw": [0, 1],
                           "tw": [0, 0]},
            "Tyr_brake": {"dim": 1,
                          "ns": [0, 1],
                          "ntot": 1,
                          "sw": [0, 1],
                          "tw": [0, 0]},
            "ax": {"dim": 1,
                   "ns": [0, 1],
                   "ntot": 1,
                   "sw": [0, 1],
                   "tw": [0, 0]},
            "m": {"dim": 1,
                  "ns": [0, 1],
                  "ntot": 1,
                  "sw": [0, 1],
                  "tw": [0, 0]},
            "m_target": {"dim": 1,
                         "ns": [0, 1],
                         "ntot": 1,
                         "sw": [0, 1],
                         "tw": [0, 0]},
            "theta": {"dim": 1,
                      "ns": [0, 1],
                      "ntot": 1,
                      "sw": [0, 1],
                      "tw": [0, 0]},
            "vx": {"dim": 1,
                   "ns": [0, 1],
                   "ntot": 1,
                   "sw": [0, 1],
                   "tw": [0, 0]}},
 "Minimizers": {"mass_error": {"A": "SamplePart128",
                               "B": "Select123",
                               "loss": "mse"}},
 "Models": "mass_estim",
 "Outputs": {"P_out": "Select124", "m_out": "Select123"},
 "Parameters": {"c_r": {"dim": 1, "sw": 1, "values": [[0.012130816467106342]]},
                "c_v": {"dim": 1, "sw": 1, "values": [[0.009265603497624397]]},
                "k_d": {"dim": 1, "sw": 1, "values": [[1.0015180110931396]]}},
 "Relations": {"ParamFun114": ["ParamFun",
                               ["SamplePart113", "ParamFun60"],
                               "FParamFun64"],
               "ParamFun117": ["ParamFun",
                               ["ParamFun16",
                                "ParamFun27",
                                "ParamFun38",
                                "ParamFun49",
                                "ParamFun60"],
                               "FParamFun67"],
               "ParamFun122": ["ParamFun",
                               ["SamplePart119",
                                "SamplePart121",
                                "ParamFun114",
                                "ParamFun117",
                                "ParamFun16",
                                "ParamFun27",
                                "ParamFun49"],
                               "FParamFun68"],
               "ParamFun16": ["ParamFun",
                              ["SamplePart15", "Constant15", "Constant16"],
                              "FParamFun12"],
               "ParamFun27": ["ParamFun",
                              ["SamplePart26", "Constant20", "Constant21"],
                              "FParamFun17"],
               "ParamFun38": ["ParamFun",
                              ["SamplePart37", "Constant25", "Constant26"],
                              "FParamFun22"],
               "ParamFun49": ["ParamFun",
                              ["SamplePart48", "Constant30", "Constant31"],
                              "FParamFun27"],
               "ParamFun60": ["ParamFun",
                              ["SamplePart59", "Constant35", "Constant36"],
                              "FParamFun32"],
               "SamplePart113": ["SamplePart", ["theta"], [0, 1]],
               "SamplePart119": ["SamplePart", ["m"], [0, 1]],
               "SamplePart121": ["SamplePart", ["P"], [0, 1]],
               "SamplePart128": ["SamplePart", ["m_target"], [0, 1]],
               "SamplePart15": ["SamplePart", ["Tyf_engine"], [0, 1]],
               "SamplePart26": ["SamplePart", ["Tyf_brake"], [0, 1]],
               "SamplePart37": ["SamplePart", ["Tyr_brake"], [0, 1]],
               "SamplePart48": ["SamplePart", ["vx"], [0, 1]],
               "SamplePart59": ["SamplePart", ["ax"], [0, 1]],
               "Select123": ["Select", ["ParamFun122"], 0],
               "Select124": ["Select", ["ParamFun122"], 1]},
 "States": {}}