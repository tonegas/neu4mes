{"Constants": {"Constant8": {"dim": 1, "values": 90.34050057876874},
               "L": {"dim": 1, "values": 2.649},
               "ay_center_0": {"dim": 1, "values": 0.0},
               "ay_center_1": {"dim": 1, "values": 2.2793929833881674},
               "ay_center_2": {"dim": 1, "values": 4.558785966776335},
               "ay_center_3": {"dim": 1, "values": 6.838178950164503},
               "ay_center_4": {"dim": 1, "values": 9.11757193355267},
               "ay_center_5": {"dim": 1, "values": 11.396964916940837},
               "ay_center_6": {"dim": 1, "values": 13.676357900329004},
               "delta_sw_map": {"dim": 1,
                                "sw": 100,
                                "values": [[-5.646462110062002],
                                           [-5.539048665195617],
                                           [-5.431635289433799],
                                           [-5.3242222352748305],
                                           [-5.2168093543504375],
                                           [-5.109396341935852],
                                           [-5.001983351315788],
                                           [-4.894566736834197],
                                           [-4.787151160016803],
                                           [-4.679739445947011],
                                           [-4.572326802104671],
                                           [-4.464913255219533],
                                           [-4.357501267169422],
                                           [-4.250086926353467],
                                           [-4.142675085931141],
                                           [-4.035259873764619],
                                           [-3.9278458309251496],
                                           [-3.8203823251861078],
                                           [-3.712751976706846],
                                           [-3.6049446504282736],
                                           [-3.497036536196591],
                                           [-3.389114092810388],
                                           [-3.2811167060268263],
                                           [-3.1729195087919493],
                                           [-3.0643658328422947],
                                           [-2.955441418658437],
                                           [-2.8461492455858943],
                                           [-2.7363951871409933],
                                           [-2.62592399546427],
                                           [-2.5145432601792064],
                                           [-2.4021838026264897],
                                           [-2.2888054404420504],
                                           [-2.174402441641845],
                                           [-2.0589911070686737],
                                           [-1.9426375003997423],
                                           [-1.8253573697615213],
                                           [-1.7072273012067407],
                                           [-1.5883320909754433],
                                           [-1.4687757298198205],
                                           [-1.3484337833912594],
                                           [-1.2271287367979749],
                                           [-1.1051305704916943],
                                           [-0.9826045357068098],
                                           [-0.859501015888766],
                                           [-0.7355667109582144],
                                           [-0.6099162016323014],
                                           [-0.4817363956408302],
                                           [-0.3510465317232746],
                                           [-0.2174257193697935],
                                           [-0.07720255842263235],
                                           [0.07720216075653559],
                                           [0.2174254915672902],
                                           [0.3510465498777706],
                                           [0.48173642451159543],
                                           [0.6099162671001426],
                                           [0.735566843603255],
                                           [0.8595009594278359],
                                           [0.9826045158444567],
                                           [1.1051305415775752],
                                           [1.2271287191523648],
                                           [1.3484337410188887],
                                           [1.4687757200728198],
                                           [1.5883320819693523],
                                           [1.7072272951583023],
                                           [1.8253573647130865],
                                           [1.942637497847425],
                                           [2.058991105391395],
                                           [2.1744024413316474],
                                           [2.288805440121259],
                                           [2.402183801276442],
                                           [2.514543254557466],
                                           [2.6259239897204965],
                                           [2.736395163441115],
                                           [2.8461492392971066],
                                           [2.9554414058940757],
                                           [3.064365822302269],
                                           [3.172919483943662],
                                           [3.2811166996263377],
                                           [3.38911408722406],
                                           [3.497036536666451],
                                           [3.604944637070082],
                                           [3.712751964527851],
                                           [3.8203823333391864],
                                           [3.927845837247989],
                                           [4.035259873764619],
                                           [4.1426750866532185],
                                           [4.250086926383138],
                                           [4.357501268010007],
                                           [4.464913255219533],
                                           [4.572326802945256],
                                           [4.679739445947011],
                                           [4.7871511597858785],
                                           [4.89456673678032],
                                           [5.0019833504752205],
                                           [5.1093963414771455],
                                           [5.216809354467026],
                                           [5.324222234659794],
                                           [5.431635289755463],
                                           [5.5390486635953415],
                                           [5.646462097930567]]},
               "delta_w_avg_map": {"dim": 1,
                                   "sw": 100,
                                   "values": [[-0.47372682057737875],
                                              [-0.46415658177783853],
                                              [-0.45458634297829836],
                                              [-0.4450161041787582],
                                              [-0.43544586537920055],
                                              [-0.4258756265796603],
                                              [-0.41630538778012016],
                                              [-0.40673514898058],
                                              [-0.3971649101810398],
                                              [-0.3875946713814996],
                                              [-0.3780244325819594],
                                              [-0.36845419378240174],
                                              [-0.3588839549828616],
                                              [-0.3493137161833214],
                                              [-0.3397434773837812],
                                              [-0.3301732385842411],
                                              [-0.3206029997847009],
                                              [-0.31103276098514326],
                                              [-0.30146252218560304],
                                              [-0.2918922833860629],
                                              [-0.28232204458652266],
                                              [-0.2727518057869825],
                                              [-0.26318156698744233],
                                              [-0.2536113281878847],
                                              [-0.24404108938834448],
                                              [-0.23447085058880432],
                                              [-0.22490061178926413],
                                              [-0.21533037298972393],
                                              [-0.20576013419018377],
                                              [-0.19618989539062612],
                                              [-0.18661965659108593],
                                              [-0.17704941779154573],
                                              [-0.1674791789920056],
                                              [-0.1579089401924654],
                                              [-0.1483387013929252],
                                              [-0.1387684625933676],
                                              [-0.1291982237938274],
                                              [-0.11962798499428719],
                                              [-0.11005774619474702],
                                              [-0.10048750739520683],
                                              [-0.09091726859566665],
                                              [-0.08134702979610901],
                                              [-0.07177679099656883],
                                              [-0.06220655219702864],
                                              [-0.05263631339748846],
                                              [-0.04306607459794828],
                                              [-0.0334958357984081],
                                              [-0.02392559699885046],
                                              [-0.014355358199310275],
                                              [-0.004785119399770092],
                                              [0.004785119399770092],
                                              [0.014355358199310275],
                                              [0.02392559699885046],
                                              [0.0334958357984081],
                                              [0.04306607459794828],
                                              [0.05263631339748846],
                                              [0.06220655219702864],
                                              [0.07177679099656883],
                                              [0.08134702979610901],
                                              [0.09091726859566665],
                                              [0.10048750739520683],
                                              [0.11005774619474702],
                                              [0.11962798499428719],
                                              [0.1291982237938274],
                                              [0.1387684625933676],
                                              [0.1483387013929252],
                                              [0.1579089401924654],
                                              [0.1674791789920056],
                                              [0.17704941779154573],
                                              [0.18661965659108593],
                                              [0.19618989539062612],
                                              [0.20576013419018377],
                                              [0.21533037298972393],
                                              [0.22490061178926413],
                                              [0.23447085058880432],
                                              [0.24404108938834448],
                                              [0.2536113281878847],
                                              [0.26318156698744233],
                                              [0.2727518057869825],
                                              [0.28232204458652266],
                                              [0.2918922833860629],
                                              [0.30146252218560304],
                                              [0.31103276098514326],
                                              [0.3206029997847009],
                                              [0.3301732385842411],
                                              [0.3397434773837812],
                                              [0.3493137161833214],
                                              [0.3588839549828616],
                                              [0.36845419378240174],
                                              [0.3780244325819594],
                                              [0.3875946713814996],
                                              [0.3971649101810398],
                                              [0.40673514898058],
                                              [0.41630538778012016],
                                              [0.4258756265796603],
                                              [0.43544586537920055],
                                              [0.4450161041787582],
                                              [0.45458634297829836],
                                              [0.46415658177783853],
                                              [0.47372682057737875]]}},
 "Functions": {"FFuzzify10": {"centers": [0.0,
                                          2.2793929833881674,
                                          4.558785966776335,
                                          6.838178950164503,
                                          9.11757193355267,
                                          11.396964916940837,
                                          13.676357900329004],
                              "dim_out": {"dim": 7},
                              "functions": "Triangular",
                              "names": "Triangular"},
               "FFuzzify34": {"centers": [9.574318117487577,
                                          23.035348527701103,
                                          36.49637893791463,
                                          49.95740934812816,
                                          63.418439758341684,
                                          76.87947016855522,
                                          90.34050057876874],
                              "dim_out": {"dim": 7},
                              "functions": "Triangular",
                              "names": "Triangular"},
               "FParamFun11": {"code": "def handling_diagr_local(curv,ay,vx_norm,  # inputs\n                         ay_0,L,           # constants\n                         k1_vx,k2_vx       # learnable arrays of parameters\n                         ):\n  sign_ay = torch.sign(ay)  # sign of the lateral acceleration\n\n  # compute k1, as a function of vx \n  k1_vx_fun = k1_vx[0,0,0]\n  for ii in range(1,k1_vx.size(2)):\n    k1_vx_fun = k1_vx_fun + k1_vx[0,0,ii]*torch.pow(vx_norm,ii)\n\n  # compute k2, as a function of vx\n  k2_vx_fun = k2_vx[0,0,0]\n  for ii in range(1,k2_vx.size(2)):\n    k2_vx_fun = k2_vx_fun + k2_vx[0,0,ii]*torch.pow(vx_norm,ii)\n\n  # output of the local model of the handling diagram\n  output = curv*L + k1_vx_fun*sign_ay + k2_vx_fun*(ay - ay_0*sign_ay)\n  return output\n",
                               "in_dim": [{"dim": 1, "sw": 15},
                                          {"dim": 1, "sw": 15},
                                          {"dim": 1, "sw": 15},
                                          {"dim": 1},
                                          {"dim": 1},
                                          {"dim": [1, 4], "sw": 1},
                                          {"dim": [1, 2], "sw": 1}],
                               "map_over_dim": false,
                               "n_input": 7,
                               "name": "handling_diagr_local",
                               "out_dim": {"dim": 1, "sw": 15},
                               "params_and_consts": []},
               "FParamFun45": {"code": "def steer_map_spline(x,x_data,y_data):\n  # Inputs: \n  # x: average steering angle at the front wheels [rad]\n  # x_data: map of average steering angles at the front wheels (delta_w_avg_map) [rad]\n  # y_data: map of steering wheel angles (delta_sw_map) [rad]\n  # Output:\n  # y: steering wheel angle [rad]\n\n  # Squeeze the dimensions of the inputs\n  x_data = x_data.squeeze()\n  y_data = y_data.squeeze()\n\n  # Linear interpolation of the steering map:\n  # Find the indices of the intervals containing each x\n  indices = torch.searchsorted(x_data, x, right=true).clamp(1, len(x_data) - 1)\n\n  # Get the values for the intervals\n  x1 = x_data[indices - 1]\n  x2 = x_data[indices]\n  y1 = y_data[indices - 1]\n  y2 = y_data[indices]\n\n  # Linear interpolation formula\n  y = y1 + (y2 - y1) * (x - x1) / (x2 - x1)\n\n  # Saturate the output if x is out of bounds\n  y = torch.where(x < x_data[0], y_data[0], y)    # Saturate to minimum y_data\n  y = torch.where(x > x_data[-1], y_data[-1], y)  # Saturate to maximum y_data\n  return y\n",
                               "in_dim": [{"dim": 1, "sw": 1}],
                               "map_over_dim": [0, null, null],
                               "n_input": 1,
                               "name": "steer_map_spline",
                               "out_dim": {"dim": 1, "sw": 1},
                               "params_and_consts": ["delta_w_avg_map",
                                                     "delta_sw_map"]},
               "FParamFun6": {"code": "def normalize_fun(x,x_max):\n  return x/x_max\n",
                              "in_dim": [{"dim": 1, "sw": 15}, {"dim": 1}],
                              "map_over_dim": false,
                              "n_input": 2,
                              "name": "normalize_fun",
                              "out_dim": {"dim": 1, "sw": 15},
                              "params_and_consts": []},
               "FParamFun9": {"code": "def abs_fun(x):\n  return torch.abs(x)\n",
                              "in_dim": [{"dim": 1, "sw": 15}],
                              "map_over_dim": false,
                              "n_input": 1,
                              "name": "abs_fun",
                              "out_dim": {"dim": 1, "sw": 15},
                              "params_and_consts": []}},
 "Inputs": {"ay": {"dim": 1, "sw": [0, 15], "tw": [0, 0]},
            "curv": {"dim": 1, "sw": [0, 15], "tw": [0, 0]},
            "steer": {"dim": 1, "sw": [-15, 0], "tw": [0, 0]},
            "steer_target": {"dim": 1, "sw": [0, 1], "tw": [0, 0]},
            "vx": {"dim": 1, "sw": [0, 15], "tw": [0, 0]}},
 "Minimizers": {"steer_error": {"A": "SamplePart143",
                                "B": "steering_angle",
                                "loss": "mse"}},
 "Models": "steer_ctrl",
 "Outputs": {"steering_angle": "Add138"},
 "Parameters": {"PFir36p": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.1,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 15},
                "PFir37p": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.1,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 15},
                "PFir38p": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.1,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 15},
                "PFir39p": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.1,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 15},
                "PFir40p": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.1,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 15},
                "PFir41p": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.1,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 15},
                "PFir42p": {"dim": 1,
                            "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                         "name": "init_exp",
                                         "params": {"lambda": 5,
                                                    "max_value": 0.1,
                                                    "monotonicity": "decreasing",
                                                    "size_index": 0}},
                            "sw": 15},
                "fir_auto_regression": {"dim": 1,
                                        "init_fun": {"code": "def init_exp(indexes, params_size, dict_param = {'size_index':0, 'max_value':1, 'lambda':3, 'monotonicity':'decreasing'}):\n    import numpy as np\n    size_index = dict_param['size_index']\n    monotonicity = dict_param['monotonicity']\n    if monotonicity == 'increasing':\n        # increasing exponential, the 'max_value' is the value at x=1, i.e, at the end of the range\n        x = 1 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(dict_param['lambda']*(x-1))\n    elif monotonicity == 'decreasing':\n        # decreasing exponential, the 'max_value' is the value at x=0, i.e, at the beginning of the range\n        x = 0 if params_size[size_index]-1 == 0 else indexes[size_index]/(params_size[size_index]-1)\n        out = dict_param['max_value']*np.exp(-dict_param['lambda']*x)\n    else:\n        raise ValueError('The parameter monotonicity must be either increasing or decreasing.')\n    return out\n",
                                                     "name": "init_exp",
                                                     "params": {"lambda": 5,
                                                                "max_value": 0.001,
                                                                "monotonicity": "increasing",
                                                                "size_index": 0}},
                                        "sw": 15},
                "k1_vx_0": {"dim": [1, 4],
                            "sw": 1,
                            "values": [[array([-1.27715331e-04,  9.70688827e-06,  1.10373109e-05,  4.43694895e-05])]]},
                "k1_vx_1": {"dim": [1, 4],
                            "sw": 1,
                            "values": [[array([ 0.00656884, -0.01396985,  0.02392887, -0.0126343 ])]]},
                "k1_vx_2": {"dim": [1, 4],
                            "sw": 1,
                            "values": [[array([ 0.01254875, -0.01983545,  0.02949388, -0.01421811])]]},
                "k1_vx_3": {"dim": [1, 4],
                            "sw": 1,
                            "values": [[array([ 0.02041813, -0.02643186,  0.03237451, -0.01259456])]]},
                "k1_vx_4": {"dim": [1, 4],
                            "sw": 1,
                            "values": [[array([ 0.03395231, -0.05983506,  0.10093369, -0.05491947])]]},
                "k1_vx_5": {"dim": [1, 4],
                            "sw": 1,
                            "values": [[array([ 0.05560788, -0.00368961, -0.06567367,  0.05234027])]]},
                "k1_vx_6": {"dim": [1, 4],
                            "sw": 1,
                            "values": [[array([ 0.36252747, -1.32728833,  2.07758285, -1.04483397])]]},
                "k2_vx_0": {"dim": [1, 2],
                            "sw": 1,
                            "values": [[array([  -5134.04972558, -222779.7180434 ])]]},
                "k2_vx_1": {"dim": [1, 2],
                            "sw": 1,
                            "values": [[array([  -5134.05037878, -222779.71633897])]]},
                "k2_vx_2": {"dim": [1, 2],
                            "sw": 1,
                            "values": [[array([  -5134.05038884, -222779.71570012])]]},
                "k2_vx_3": {"dim": [1, 2],
                            "sw": 1,
                            "values": [[array([  -5134.05002165, -222779.71529819])]]},
                "k2_vx_4": {"dim": [1, 2],
                            "sw": 1,
                            "values": [[array([  -5134.04813083, -222779.71634041])]]},
                "k2_vx_5": {"dim": [1, 2],
                            "sw": 1,
                            "values": [[array([  -5134.03790158, -222779.72519239])]]},
                "k2_vx_6": {"dim": [1, 2],
                            "sw": 1,
                            "values": [[array([  -5134.05687615, -222779.70735059])]]}},
 "Relations": {"Add100": ["Add", ["Add99", "Mul94"]],
               "Add125": ["Add", ["Fir106", "Fir109"]],
               "Add126": ["Add", ["Add125", "Fir112"]],
               "Add127": ["Add", ["Add126", "Fir115"]],
               "Add128": ["Add", ["Add127", "Fir118"]],
               "Add129": ["Add", ["Add128", "Fir121"]],
               "Add130": ["Add", ["Add129", "Fir124"]],
               "Add138": ["Add", ["ParamFun133", "Fir136"]],
               "Add95": ["Add", ["Mul34", "Mul44"]],
               "Add96": ["Add", ["Add95", "Mul54"]],
               "Add97": ["Add", ["Add96", "Mul64"]],
               "Add98": ["Add", ["Add97", "Mul74"]],
               "Add99": ["Add", ["Add98", "Mul84"]],
               "Fir106": ["Fir", ["Mul105"], "PFir36p", 0],
               "Fir109": ["Fir", ["Mul108"], "PFir37p", 0],
               "Fir112": ["Fir", ["Mul111"], "PFir38p", 0],
               "Fir115": ["Fir", ["Mul114"], "PFir39p", 0],
               "Fir118": ["Fir", ["Mul117"], "PFir40p", 0],
               "Fir121": ["Fir", ["Mul120"], "PFir41p", 0],
               "Fir124": ["Fir", ["Mul123"], "PFir42p", 0],
               "Fir136": ["Fir", ["SamplePart135"], "fir_auto_regression", 0],
               "Fuzzify103": ["Fuzzify", ["SamplePart102"], "FFuzzify34"],
               "Fuzzify16": ["Fuzzify", ["ParamFun15"], "FFuzzify10"],
               "Mul105": ["Mul", ["Add100", "Select104"]],
               "Mul108": ["Mul", ["Add100", "Select107"]],
               "Mul111": ["Mul", ["Add100", "Select110"]],
               "Mul114": ["Mul", ["Add100", "Select113"]],
               "Mul117": ["Mul", ["Add100", "Select116"]],
               "Mul120": ["Mul", ["Add100", "Select119"]],
               "Mul123": ["Mul", ["Add100", "Select122"]],
               "Mul34": ["Mul", ["ParamFun24", "Select33"]],
               "Mul44": ["Mul", ["ParamFun38", "Select43"]],
               "Mul54": ["Mul", ["ParamFun48", "Select53"]],
               "Mul64": ["Mul", ["ParamFun58", "Select63"]],
               "Mul74": ["Mul", ["ParamFun68", "Select73"]],
               "Mul84": ["Mul", ["ParamFun78", "Select83"]],
               "Mul94": ["Mul", ["ParamFun88", "Select93"]],
               "ParamFun133": ["ParamFun", ["Add130"], "FParamFun45"],
               "ParamFun15": ["ParamFun", ["SamplePart14"], "FParamFun9"],
               "ParamFun24": ["ParamFun",
                              ["SamplePart18",
                               "SamplePart20",
                               "ParamFun8",
                               "ay_center_0",
                               "L",
                               "k1_vx_0",
                               "k2_vx_0"],
                              "FParamFun11"],
               "ParamFun38": ["ParamFun",
                              ["SamplePart18",
                               "SamplePart20",
                               "ParamFun8",
                               "ay_center_1",
                               "L",
                               "k1_vx_1",
                               "k2_vx_1"],
                              "FParamFun11"],
               "ParamFun48": ["ParamFun",
                              ["SamplePart18",
                               "SamplePart20",
                               "ParamFun8",
                               "ay_center_2",
                               "L",
                               "k1_vx_2",
                               "k2_vx_2"],
                              "FParamFun11"],
               "ParamFun58": ["ParamFun",
                              ["SamplePart18",
                               "SamplePart20",
                               "ParamFun8",
                               "ay_center_3",
                               "L",
                               "k1_vx_3",
                               "k2_vx_3"],
                              "FParamFun11"],
               "ParamFun68": ["ParamFun",
                              ["SamplePart18",
                               "SamplePart20",
                               "ParamFun8",
                               "ay_center_4",
                               "L",
                               "k1_vx_4",
                               "k2_vx_4"],
                              "FParamFun11"],
               "ParamFun78": ["ParamFun",
                              ["SamplePart18",
                               "SamplePart20",
                               "ParamFun8",
                               "ay_center_5",
                               "L",
                               "k1_vx_5",
                               "k2_vx_5"],
                              "FParamFun11"],
               "ParamFun8": ["ParamFun",
                             ["SamplePart7", "Constant8"],
                             "FParamFun6"],
               "ParamFun88": ["ParamFun",
                              ["SamplePart18",
                               "SamplePart20",
                               "ParamFun8",
                               "ay_center_6",
                               "L",
                               "k1_vx_6",
                               "k2_vx_6"],
                              "FParamFun11"],
               "SamplePart102": ["SamplePart", ["vx"], [0, 15]],
               "SamplePart135": ["SamplePart", ["steer"], [-15, 0]],
               "SamplePart14": ["SamplePart", ["ay"], [0, 15]],
               "SamplePart143": ["SamplePart", ["steer_target"], [0, 1]],
               "SamplePart18": ["SamplePart", ["curv"], [0, 15]],
               "SamplePart20": ["SamplePart", ["ay"], [0, 15]],
               "SamplePart7": ["SamplePart", ["vx"], [0, 15]],
               "Select104": ["Select", ["Fuzzify103"], 0],
               "Select107": ["Select", ["Fuzzify103"], 1],
               "Select110": ["Select", ["Fuzzify103"], 2],
               "Select113": ["Select", ["Fuzzify103"], 3],
               "Select116": ["Select", ["Fuzzify103"], 4],
               "Select119": ["Select", ["Fuzzify103"], 5],
               "Select122": ["Select", ["Fuzzify103"], 6],
               "Select33": ["Select", ["Fuzzify16"], 0],
               "Select43": ["Select", ["Fuzzify16"], 1],
               "Select53": ["Select", ["Fuzzify16"], 2],
               "Select63": ["Select", ["Fuzzify16"], 3],
               "Select73": ["Select", ["Fuzzify16"], 4],
               "Select83": ["Select", ["Fuzzify16"], 5],
               "Select93": ["Select", ["Fuzzify16"], 6]},
 "SampleTime": 1,
 "States": {}}